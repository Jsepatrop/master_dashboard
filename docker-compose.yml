version: '3.8'

services:
  # Backend API Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: master-dashboard-backend
    ports:
      - "8000:8000"
    environment:
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000,https://localhost:3000
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - backend_logs:/app/logs
    networks:
      - master-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: master-dashboard-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - master-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Data Simulator Service
  simulator:
    build:
      context: ./simulator
      dockerfile: Dockerfile
    container_name: master-dashboard-simulator
    environment:
      - BACKEND_URL=ws://backend:8000/ws/data
      - UPDATE_INTERVAL=5
    depends_on:
      - backend
    networks:
      - master-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "print('Simulator running')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: master-dashboard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - master-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: master-dashboard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - master-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Optional - for future use)
  postgres:
    image: postgres:15-alpine
    container_name: master-dashboard-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=master_dashboard
      - POSTGRES_USER=dashboard
      - POSTGRES_PASSWORD=dashboard_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - master-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard -d master_dashboard"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  master-dashboard:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16